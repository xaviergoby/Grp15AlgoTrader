import pandas as pd


class RSI:
    # Note to self (Xavier): This was copied from revamp.new_rsi and not from technical_indicator_classes.RSI

    def __init__(self, close, time_period=14, overbought_level=70, oversold_level=30):
        """

        :param close: <class 'pandas.core.series.Series'> of the close price
        :param time_period: int of the time period. Is 14 by default
        :param overbought_level: int of the over bought limit. Is 70 by default
        :param oversold_level: int of the over sold limit. Is 30 by default
        """
        # 1
        self.close = close
        # 2
        self._time_period = time_period
        self._overbought_level = overbought_level
        self._oversold_level = oversold_level
        # 2
        self.rsi_values = self.get_rsi_values()
        # 4
        self.rsi_cat_labels = self.get_rsi_labels()
        # 5
        self.rsi_int_labels = self.get_rsi_int_labels()

    def get_rsi_values(self):
        """
        Relative Strength Index (RSI) is a momentum oscillator that measures the speed and change of price movements.
        RSI oscillates between zero and 100. Traditionally, and according to Wilder,
        RSI is considered overbought when above 70 and oversold when below 30.
        Signals can also be generated by looking for divergences, failure swings and centerline crossovers.
        RSI can also be used to identify the general trend.
        :return: <class 'numpy.ndarray'> (len(close),)
        """
        ## get the price diff
        delta = self.close.diff()

        ## positive gains (up) and negative gains (down) Series
        up, down = delta.copy(), delta.copy()
        up[up < 0] = 0
        down[down > 0] = 0

        # EMAs of ups and downs
        _gain = up.ewm(span=self._time_period, min_periods=self._time_period - 1).mean()
        _loss = down.abs().ewm(span=self._time_period, min_periods=self._time_period - 1).mean()

        RS = _gain / _loss
        result = pd.Series(100. - (100. / (1. + RS)), name="RSI")
        return result

    def get_rsi_labels(self):
        """
        :return: A list of buy, sell and hold labels
        """
        signal = self.get_rsi_values().dropna().values
        cat_sig_list_labels = []
        for s in signal:
            if s < self._oversold_level:
                cat_sig_list_labels.append("Buy")
            elif s > self._overbought_level:
                cat_sig_list_labels.append("Sell")
            else:
                cat_sig_list_labels.append("Hold")
        return cat_sig_list_labels

    def get_rsi_int_labels(self):
        signal = self.get_rsi_values().dropna().values
        cat_sig_list_labels = []
        for s in signal:
            if s < self._oversold_level:
                cat_sig_list_labels.append(1)
            elif s > self._overbought_level:
                cat_sig_list_labels.append(-1)
            else:
                cat_sig_list_labels.append(0)
        return cat_sig_list_labels

if __name__ == "__main__":
    from data_loader import data_sources
    apple = data_sources.get_stocks_data("AAPL")
    close = apple["Close"]
    print(type(close))
    rsi = RSI(close, time_period=14, overbought_level=70, oversold_level=30)
    rsi_values = rsi.get_rsi_values()
    print(len(rsi.get_rsi_values()), type(rsi.rsi_values), type(rsi.get_rsi_values()), rsi.rsi_values.shape)
    # print(len(rsi.get_rsi_labels()), type(rsi.rsi_labels), type(rsi.get_rsi_labels()))

